{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"codeofconduct/","title":"Code of Conduct","text":""},{"location":"codeofconduct/#1-importing","title":"1. Importing","text":""},{"location":"codeofconduct/#11-folder-structure","title":"1.1 Folder Structure","text":"<p>You should be only adding things within Asset Folder. And the asset folder should be organized as such: <pre><code>Assets\n    _Developers(Use a `_`to keep this folder at the top)\n        DeveloperName\n            (Work in progress assets)\n    ProjectName\n            SFX\n            Art\n                Anims\n                Materials\n                Textures\n                Models\n                Fonts\n            Scenes\n                Menu\n                Main\n                Level1\n            Lighting\n                HDRI\n                Lut\n                Textures\n            Prefabs\n                Player\n                Yearling\n            Scripts\n                AI\n                Gameplay\n                Input\n                Tools\n            Sound\n                Characters\n                Abilities\n    Plugins\n    ThirdPartySDK  \n</code></pre></p>"},{"location":"codeofconduct/#12-import","title":"1.2 Import","text":"<p>Import into your corresponding <code>DeveloperName</code> folder inside <code>_Developers</code> folder. Process your imports there, try out new package. When it is integrated into the game, keep only the used section (remove package demos, for example, to avoid cluttering/bloat the project), and move it to the respective folder or Plugin.  If your <code>DeveloperName</code> folder hasn't been created, create one for yourself. </p>"},{"location":"codeofconduct/#13-asset-naming","title":"1.3 Asset Naming","text":"<p>|When naming an asset use these tables to determine the prefix and suffix to use with an asset's Base Asset Name.</p>"},{"location":"codeofconduct/#sections","title":"Sections","text":"<p>4.2.1 Most Common</p> <p>4.2.2 Animations</p> <p>4.2.3 Artificial Intelligence</p> <p>4.2.4 Prefabs</p> <p>4.2.5 Materials</p> <p>4.2.6 Textures</p> <p>4.2.7 Miscellaneous</p> <p>4.2.8 Physics</p> <p>4.2.9 Audio</p> <p>4.2.10 User Interface</p> <p>4.2.11 Effects</p> <p></p>"},{"location":"codeofconduct/#most-common","title":"Most Common","text":"Asset Type Prefix Suffix Notes Level / Scene * Should be in a folder called Levels. e.g. <code>Levels/A4_C17_Parking_Garage.unity</code> Level (Persistent) _P Level (Audio) _Audio Level (Lighting) _Lighting Level (Geometry) _Geo Level (Gameplay) _Gameplay Prefab Material M_ Static Mesh SM_ Skeletal Mesh SK_ Texture T_ _? See Textures Particle System PS_"},{"location":"codeofconduct/#421a-3d-models-fbx-files","title":"4.2.1a 3D Models (FBX Files)","text":"<p>PascalCase</p> Asset Type Prefix Suffix Notes Characters CH_ Vehicles VH_ Weapons WP_ Static Mesh SM_ Skeletal Mesh SK_ Skeleton SKEL_ Rig RIG_"},{"location":"codeofconduct/#421b-3d-models-3ds-max","title":"4.2.1b 3d Models (3ds Max)","text":"<p>All meshes in 3ds Max are lowercase to differentiate them from their FBX export.</p> Asset Type Prefix Suffix Notes Mesh _mesh_lod0* Only use LOD suffix if model uses LOD's Mesh Collider _collider <p></p>"},{"location":"codeofconduct/#422-animations","title":"4.2.2 Animations","text":"Asset Type Prefix Suffix Notes Animation Clip A_ Animation Controller AC_ Avatar Mask AM_ Morph Target MT_"},{"location":"codeofconduct/#423-artificial-intelligence","title":"4.2.3 Artificial Intelligence","text":"Asset Type Prefix Suffix Notes AI Controller AIC_ Behavior Tree BT_ Blackboard BB_ Decorator BTDecorator_ Service BTService_ Task BTTask_ Environment Query EQS_ EnvQueryContext EQS_ Context"},{"location":"codeofconduct/#424-prefabs","title":"4.2.4 Prefabs","text":"Asset Type Prefix Suffix Notes Prefab Prefab Instance I Scriptable Object Assigned \"Blueprint\" label in Editor"},{"location":"codeofconduct/#425-materials","title":"4.2.5 Materials","text":"Asset Type Prefix Suffix Notes Material M_ Material Instance MI_ Physical Material PM_"},{"location":"codeofconduct/#426-textures","title":"4.2.6 Textures","text":"Asset Type Prefix Suffix Notes Texture T_ Texture (Diffuse/Albedo/Base Color) T_ _D Texture (Normal) T_ _N Texture (Roughness) T_ _R Texture (Alpha/Opacity) T_ _A Texture (Ambient Occlusion) T_ _AO Texture (Bump) T_ _B Texture (Emissive) T_ _E Texture (Mask) T_ _M Texture (Specular) T_ _S Texture (Packed) T_ _* See notes below about packing. Texture Cube TC_ Media Texture MT_ Render Target RT_ Cube Render Target RTC_ Texture Light Profile TLP_"},{"location":"codeofconduct/#4261-texture-packing","title":"4.2.6.1 Texture Packing","text":"<p>It is common practice to pack multiple layers of texture data into one texture. An example of this is packing Emissive, Roughness, Ambient Occlusion together as the Red, Green, and Blue channels of a texture respectively. To determine the suffix, simply stack the given suffix letters from above together, e.g. <code>_ERO</code>.</p> <p>It is generally acceptable to include an Alpha/Opacity layer in your Diffuse/Albedo's alpha channel and as this is common practice, adding <code>A</code> to the <code>_D</code> suffix is optional.</p> <p>Packing 4 channels of data into a texture (RGBA) is not recommended except for an Alpha/Opacity mask in the Diffuse/Albedo's alpha channel as a texture with an alpha channel incurs more overhead than one without. </p>"},{"location":"codeofconduct/#427-miscellaneous","title":"4.2.7 Miscellaneous","text":"Asset Type Prefix Suffix Notes Universal Render Pipeline Asset URP_ Post Process Volume Profile PP_ User Interface UI_"},{"location":"codeofconduct/#428-physics","title":"4.2.8 Physics","text":"Asset Type Prefix Suffix Notes Physical Material PM_"},{"location":"codeofconduct/#429-audio","title":"4.2.9 Audio","text":"Asset Type Prefix Suffix Notes Audio Clip A_ Audio Mixer MIX_ Dialogue Voice DV_ Audio Class No prefix/suffix. Should be put in a folder called AudioClasses"},{"location":"codeofconduct/#4210-user-interface","title":"4.2.10 User Interface","text":"Asset Type Prefix Suffix Notes Font Font_ Texture (Sprite) T_ _GUI"},{"location":"codeofconduct/#4211-effects","title":"4.2.11 Effects","text":"Asset Type Prefix Suffix Notes Particle System PS_"},{"location":"codeofconduct/#2-version-control","title":"2. Version Control","text":""},{"location":"home/","title":"Welcome to Carnivore Studio","text":""},{"location":"home/#how-to-use-the-documentation","title":"How to use the documentation","text":"<p>This documentation is divided by roles. Check your role-specific tab for guidelines. For example, if you are artist, go to artist tab to check which guidelines apply to you. </p> <p>There are also shared guidelines, for example rules for using version control. Those you can find in the Code of Conduct Page. </p>"},{"location":"producer/","title":"Producer","text":"<p>producer can regularly create anonymous polls to check the confidence of each member, whether they think they can complete the current tasks. Easier for feedback. </p>"},{"location":"programmer/","title":"Programmer","text":""},{"location":"programmer/#1-code","title":"1. Code","text":""},{"location":"programmer/#11-code-style","title":"1.1 Code Style","text":"<p>Readibility first. Camel case, can use snake case to divide if name is too long. <pre><code>public: \n    DialogueSystem\n    GameManager\n\nprivate:\n    _dialogueSystem\n    _gameManager\n</code></pre> If you use snake case, the suffix is for giving context, stating its type. <pre><code>SpeechBubble_UserInterface\nOnCommandExecuted_MulticastDelegate\n</code></pre> For private variables, first letter lower case and add _ in front of variable name. _ can avoid name conflicts with engine. <pre><code>_colliderBox\n_animator\n\nanimator =&gt; might cause warning due to name conflict with engine, variable hiding. \n</code></pre></p>"},{"location":"programmer/#2-code-architecture","title":"2 Code Architecture","text":""}]}